import telebot
from telebot import types
import os
import requests
import logging

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL")  # –í–µ–±—Ö—É–∫ –ë–∏—Ç—Ä–∏–∫—Å24
OPENLINE_ID = os.getenv("BITRIX_OPENLINE_ID")  # ID –æ—Ç–∫—Ä—ã—Ç–æ–π –ª–∏–Ω–∏–∏ –ë–∏—Ç—Ä–∏–∫—Å24

bot = telebot.TeleBot(TOKEN)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —á–∞—Ç–æ–≤ –≤ –ë–∏—Ç—Ä–∏–∫—Å24
user_sessions = {}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–∏—Ç—Ä–∏–∫—Å24
def send_to_bitrix(chat_id, message_text):
    user_info = bot.get_chat(chat_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥
    if chat_id not in user_sessions:
        response = requests.get(f"{BITRIX_WEBHOOK_URL}imopenlines.dialog.list.json")
        if response.status_code == 200 and "result" in response.json():
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            data = {
                "USER_ID": f"telegram_{chat_id}",
                "LINE_ID": OPENLINE_ID,
                "USERNAME": user_info.first_name,
                "AVATAR": user_info.photo if user_info.photo else ""
            }
            chat_response = requests.post(f"{BITRIX_WEBHOOK_URL}imopenlines.dialog.add.json", json=data)
            if chat_response.status_code == 200 and "result" in chat_response.json():
                user_sessions[chat_id] = chat_response.json()["result"]["DIALOG_ID"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    if chat_id in user_sessions:
        message_data = {
            "DIALOG_ID": user_sessions[chat_id],
            "MESSAGE": message_text
        }
        response = requests.post(f"{BITRIX_WEBHOOK_URL}imopenlines.message.add.json", json=message_data)

        if response.status_code == 200:
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ë–∏—Ç—Ä–∏–∫—Å24: {response.text}")
            return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text_message(message):
    chat_id = message.chat.id
    text = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–∏—Ç—Ä–∏–∫—Å24
    if send_to_bitrix(chat_id, text):
        bot.send_message(chat_id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ë–∏—Ç—Ä–∏–∫—Å24. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ë–∏—Ç—Ä–∏–∫—Å24. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@bot.message_handler(content_types=['photo', 'document'])
def handle_media_message(message):
    chat_id = message.chat.id

    if message.content_type == 'photo':
        file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –≤ –Ω–∞–∏–ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
    else:
        file_id = message.document.file_id

    file_info = bot.get_file(file_id)
    file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}"

    message_text = f"üìé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª: {file_url}"

    if send_to_bitrix(chat_id, message_text):
        bot.send_message(chat_id, "–§–∞–π–ª –ø–µ—Ä–µ–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ë–∏—Ç—Ä–∏–∫—Å24.")
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24
def get_messages_from_bitrix():
    response = requests.get(f"{BITRIX_WEBHOOK_URL}imopenlines.message.get.json")

    if response.status_code == 200 and "result" in response.json():
        messages = response.json()["result"]

        for msg in messages:
            user_id = msg["USER_ID"]
            text = msg["MESSAGE"]

            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            for chat_id, dialog_id in user_sessions.items():
                if dialog_id == user_id:
                    bot.send_message(chat_id, f"üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: {text}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def check_new_messages():
    while True:
        get_messages_from_bitrix()
        time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.InlineKeyboardMarkup()
    living = types.InlineKeyboardButton("–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ", callback_data='living')
    restoran = types.InlineKeyboardButton("–†–µ—Å—Ç–æ—Ä–∞–Ω", callback_data='restoran')
    spa = types.InlineKeyboardButton("–°–ü–ê", callback_data='spa')
    medicine = types.InlineKeyboardButton("–ú–µ–¥–∏—Ü–∏–Ω–∞", callback_data='medicine')
    loyality = types.InlineKeyboardButton("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –õ–û–ì–£–°", callback_data='loyality')
    markup.add(living)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    markup.add(restoran)
    markup.add(spa)
    markup.add(medicine)
    markup.add(loyality)
    return markup

# –ü–æ–¥–º–µ–Ω—é –¥–ª—è "–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ"
def living_menu():
    markup = types.InlineKeyboardMarkup()
    tech_problem = types.InlineKeyboardButton("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", callback_data='tech_problem')
    living_option2 = types.InlineKeyboardButton("–¶–µ–Ω—ã", callback_data='living_option2')
    living_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    markup.add(tech_problem)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    markup.add(living_option2)
    markup.add(living_back)
    return markup

# –ü–æ–¥–º–µ–Ω—é –¥–ª—è "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
def tech_problem_menu():
    markup = types.InlineKeyboardMarkup()
    electric_problem = types.InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º—ã —Å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ–º", callback_data='electric_problem')
    water_problem = types.InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ–º", callback_data='water_problem')
    temp_problem = types.InlineKeyboardButton("–ù–µ–∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –Ω–æ–º–µ—Ä–µ", callback_data='temp_problem')
    safe_problem = types.InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ–π—Ñ–æ–º", callback_data='safe_problem')
    tv_problem = types.InlineKeyboardButton("–ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω –¢–í", callback_data='tv_problem')
    another_problem = types.InlineKeyboardButton("–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data='another_problem')
    tech_problem_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='tech_problem_back')
    markup.add(electric_problem)
    markup.add(water_problem)
    markup.add(temp_problem)
    markup.add(safe_problem)
    markup.add(tv_problem)
    markup.add(another_problem)
    markup.add(tech_problem_back)
    return markup

#–ü–æ–¥–º–µ–Ω—é –¥–ª—è "–ü—Ä–æ–±–ª–µ–º—ã —Å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ–º"
def electric_problem_menu():
    markup = types.InlineKeyboardMarkup()
    electric_problem_menu_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='electric_problem_menu_back')
    markup.add(electric_problem_menu_back)
    return markup

#–ü–æ–¥–º–µ–Ω—é –¥–ª—è "–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ–º"
def water_problem_menu():
    markup = types.InlineKeyboardMarkup()
    water_problem_menu_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='water_problem_menu_back')
    markup.add(water_problem_menu_back)
    return markup


# –ü–æ–¥–º–µ–Ω—é –¥–ª—è "–†–µ—Å—Ç–æ—Ä–∞–Ω"
def restoran_menu():
    markup = types.InlineKeyboardMarkup()
    restoran_work_time = types.InlineKeyboardButton("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∫–æ—Ñ–µ–π–Ω–∏ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", callback_data='restoran_work_time')
    restoran_eat_menu = types.InlineKeyboardButton("–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞\—Ä—É–º-—Å–µ—Ä–≤–∏—Å–∞", callback_data='restoran_eat_menu')
    restoran_order = types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –Ω–æ–º–µ—Ä", callback_data='restoran_order')
    restoran_back = types.InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='restoran_back')
    markup.add(restoran_work_time)  
    markup.add(restoran_eat_menu)
    markup.add(restoran_order)
    markup.add(restoran_back)
    return markup

# –ü–æ–¥–º–µ–Ω—é –°–ü–ê
def spa_menu():
    markup = types.InlineKeyboardMarkup()
    spa_bron = types.InlineKeyboardButton("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥", callback_data='spa_bron')
    spa_menu_check = types.InlineKeyboardButton("–ú–µ–Ω—é", callback_data='spa_menu_check')
    spa_call_manager = types.InlineKeyboardButton("–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data='spa_call_manager')
    spa_skidki = types.InlineKeyboardButton("–ê–∫—Ü–∏–∏", callback_data='spa_skidki')
    spa_route = types.InlineKeyboardButton("–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è?", callback_data='spa_route')
    spa_call_back = types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data='spa_call_back')
    spa_back = types.InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='spa_back')
    markup.add(spa_bron)
    markup.add(spa_menu_check)
    markup.add(spa_call_manager)
    markup.add(spa_skidki)
    markup.add(spa_route)
    markup.add(spa_call_back)
    markup.add(spa_back)
    return markup

# –ü–æ–¥–º–µ–Ω—é –¥–ª—è –ü—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
def loyality_menu():
    markup = types.InlineKeyboardMarkup()
    loyality_register = types.InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url="https://loyalty.donresort.ru/")
    loyality_privileges = types.InlineKeyboardButton("–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data='loyality_privileges',)
    loyality_rules = types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", callback_data='loyality_rules')
    loyality_back = types.InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='loyality_back')
    markup.add(loyality_register)
    markup.add(loyality_privileges)
    markup.add(loyality_rules)
    markup.add(loyality_back)
    return markup
    
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∞–Ω–∞—Ç–æ—Ä–∏–π –î–æ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ",
        reply_markup=main_menu()
    )
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    # –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ
    if call.data == 'living':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ'. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=living_menu()
        )
    # –†–µ—Å—Ç–æ—Ä–∞–Ω    
    elif call.data == 'restoran':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã –≤—ã–±—Ä–∞–ª–∏ '–†–µ—Å—Ç–æ—Ä–∞–Ω'. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=restoran_menu()
        )
    # –°–ü–ê    
    elif call.data == 'spa':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã –≤—ã–±—Ä–∞–ª–∏ '–°–ø–∞'. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=spa_menu()
        )  
     # –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏    
    elif call.data == 'loyality':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –õ–û–ì–£–°'. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=loyality_menu()
        )
    
    # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –º–µ–Ω—é –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif call.data == 'loyality_back':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∞–Ω–∞—Ç–æ—Ä–∏–π –î–æ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ",
            reply_markup=main_menu()
        )
              
    # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –º–µ–Ω—é –†–µ—Å—Ç–æ—Ä–∞–Ω –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif call.data == 'restoran_back':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∞–Ω–∞—Ç–æ—Ä–∏–π –î–æ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ",
            reply_markup=main_menu()
        )
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    elif call.data == 'tech_problem':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–∏–µ –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è –ø—Ä–æ–±–ª–µ–º—ã",
            reply_markup=tech_problem_menu()
        )
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif call.data == 'main_menu':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∞–Ω–∞—Ç–æ—Ä–∏–π –î–æ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ",
            reply_markup=main_menu()
        )
    # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –º–µ–Ω—é –¢–µ—Ö–ø—Ä–æ–±–ª–µ–º—ã –≤ –º–µ–Ω—é –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ
    elif call.data == 'tech_problem_back':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ'. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=living_menu()
        )    
    # –ü—Ä–æ–±–ª–µ–º—ã —Å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ–º
    elif call.data == 'electric_problem':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—è–≤–∫–∞. –° –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è",
            reply_markup=electric_problem_menu()
            )
    # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –º–µ–Ω—é –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –≤ –º–µ–Ω—é –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ
    elif call.data == 'electric_problem_menu_back':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ'. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=living_menu()
        )
    # –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ–º
    elif call.data == 'water_problem':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—è–≤–∫–∞. –° –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è",
            reply_markup=water_problem_menu()
            )
    # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –º–µ–Ω—é –í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ –≤ –º–µ–Ω—é –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ
    elif call.data == 'water_problem_menu_back':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ'. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=living_menu()
        )
    # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –º–µ–Ω—é –°–ü–ê –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif call.data == 'spa_back':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∞–Ω–∞—Ç–æ—Ä–∏–π –î–æ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ",
            reply_markup=main_menu()
        )
    
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.delete_message(message.chat.id, message.message_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.",
        reply_markup=main_menu()
    )        

bot.infinity_polling()